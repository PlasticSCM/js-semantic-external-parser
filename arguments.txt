executing as shell Fri Sep 20 2013 16:55:19 GMT+0200 (Hora de verano romance)
shell C:\Users\gimenete\AppData\Local\Temp\\2d589cd4-dc46-439a-b10b-d73dc2d79fa1.flag
fileIn = ""
------------------------------------------------
children: []
locationSpan: { start: [0, 0], end: [0, -1] }
footerSpan: [0, -1]
span: [0, -1]
name: 'C:\Users\gimenete\Documents\semanticmerge\testfiles\base.js'
type: file
parsingErrorsDetected: false

fileIn = ""
------------------------------------------------
children: []
locationSpan: { start: [0, 0], end: [0, -1] }
footerSpan: [0, -1]
span: [0, -1]
name: 'C:\Users\gimenete\Documents\semanticmerge\testfiles\source.js'
type: file
parsingErrorsDetected: false

fileIn = "/*global setImmediate: false, setTimeout: false, console: false */\r\n(function () {\r\n\r\n    var async = {};\r\n\r\n    // global on the server, window in the browser\r\n    var root, previous_async;\r\n\r\n    root = this;\r\n    if (root != null) {\r\n      previous_async = root.async;\r\n    }\r\n\r\n    async.noConflict = function () {\r\n        root.async = previous_async;\r\n        return async;\r\n    };\r\n\r\n    function only_once(fn) {\r\n        var called = false;\r\n        return function() {\r\n            if (called) throw new Error(\"Callback was already called.\");\r\n            called = true;\r\n            fn.apply(root, arguments);\r\n        }\r\n    }\r\n\r\n    //// cross-browser compatiblity functions ////\r\n\r\n    var _each = function (arr, iterator) {\r\n        if (arr.forEach) {\r\n            return arr.forEach(iterator);\r\n        }\r\n        for (var i = 0; i < arr.length; i += 1) {\r\n            iterator(arr[i], i, arr);\r\n        }\r\n    };\r\n\r\n    var _map = function (arr, iterator) {\r\n        if (arr.map) {\r\n            return arr.map(iterator);\r\n        }\r\n        var results = [];\r\n        _each(arr, function (x, i, a) {\r\n            results.push(iterator(x, i, a));\r\n        });\r\n        return results;\r\n    };\r\n\r\n    var _reduce = function (arr, iterator, memo) {\r\n        if (arr.reduce) {\r\n            return arr.reduce(iterator, memo);\r\n        }\r\n        _each(arr, function (x, i, a) {\r\n            memo = iterator(memo, x, i, a);\r\n        });\r\n        return memo;\r\n    };\r\n\r\n    var _keys = function (obj) {\r\n        if (Object.keys) {\r\n            return Object.keys(obj);\r\n        }\r\n        var keys = [];\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {\r\n                keys.push(k);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n\r\n    //// exported async module functions ////\r\n\r\n    //// nextTick implementation with browser-compatible fallback ////\r\n    if (typeof process === 'undefined' || !(process.nextTick)) {\r\n        if (typeof setImmediate === 'function') {\r\n            async.nextTick = function (fn) {\r\n                // not a direct alias for IE10 compatibility\r\n                setImmediate(fn);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n        else {\r\n            async.nextTick = function (fn) {\r\n                setTimeout(fn, 0);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n    else {\r\n        async.nextTick = process.nextTick;\r\n        if (typeof setImmediate !== 'undefined') {\r\n            async.setImmediate = setImmediate;\r\n        }\r\n        else {\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n\r\n    async.each = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        _each(arr, function (x) {\r\n            iterator(x, only_once(function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback(null);\r\n                    }\r\n                }\r\n            }));\r\n        });\r\n    };\r\n    async.forEach = async.each;\r\n\r\n    async.eachSeries = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        var iterate = function () {\r\n            iterator(arr[completed], function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback(null);\r\n                    }\r\n                    else {\r\n                        iterate();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        iterate();\r\n    };\r\n    async.forEachSeries = async.eachSeries;\r\n\r\n    async.eachLimit = function (arr, limit, iterator, callback) {\r\n        var fn = _eachLimit(limit);\r\n        fn.apply(null, [arr, iterator, callback]);\r\n    };\r\n    async.forEachLimit = async.eachLimit;\r\n\r\n    var _eachLimit = function (limit) {\r\n\r\n        return function (arr, iterator, callback) {\r\n            callback = callback || function () {};\r\n            if (!arr.length || limit <= 0) {\r\n                return callback();\r\n            }\r\n            var completed = 0;\r\n            var started = 0;\r\n            var running = 0;\r\n\r\n            (function replenish () {\r\n                if (completed >= arr.length) {\r\n                    return callback();\r\n                }\r\n\r\n                while (running < limit && started < arr.length) {\r\n                    started += 1;\r\n                    running += 1;\r\n                    iterator(arr[started - 1], function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            callback = function () {};\r\n                        }\r\n                        else {\r\n                            completed += 1;\r\n                            running -= 1;\r\n                            if (completed >= arr.length) {\r\n                                callback();\r\n                            }\r\n                            else {\r\n                                replenish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n        };\r\n    };\r\n\r\n\r\n    var doParallel = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.each].concat(args));\r\n        };\r\n    };\r\n    var doParallelLimit = function(limit, fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\r\n        };\r\n    };\r\n    var doSeries = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.eachSeries].concat(args));\r\n        };\r\n    };\r\n\r\n\r\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (err, v) {\r\n                results[x.index] = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, results);\r\n        });\r\n    };\r\n    async.map = doParallel(_asyncMap);\r\n    async.mapSeries = doSeries(_asyncMap);\r\n    async.mapLimit = function (arr, limit, iterator, callback) {\r\n        return _mapLimit(limit)(arr, iterator, callback);\r\n    };\r\n\r\n    var _mapLimit = function(limit) {\r\n        return doParallelLimit(limit, _asyncMap);\r\n    };\r\n\r\n    // reduce only has a series version, as doing reduce in parallel won't\r\n    // work in many situations.\r\n    async.reduce = function (arr, memo, iterator, callback) {\r\n        async.eachSeries(arr, function (x, callback) {\r\n            iterator(memo, x, function (err, v) {\r\n                memo = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, memo);\r\n        });\r\n    };\r\n    // inject alias\r\n    async.inject = async.reduce;\r\n    // foldl alias\r\n    async.foldl = async.reduce;\r\n\r\n    async.reduceRight = function (arr, memo, iterator, callback) {\r\n        var reversed = _map(arr, function (x) {\r\n            return x;\r\n        }).reverse();\r\n        async.reduce(reversed, memo, iterator, callback);\r\n    };\r\n    // foldr alias\r\n    async.foldr = async.reduceRight;\r\n\r\n    var _filter = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.filter = doParallel(_filter);\r\n    async.filterSeries = doSeries(_filter);\r\n    // select alias\r\n    async.select = async.filter;\r\n    async.selectSeries = async.filterSeries;\r\n\r\n    var _reject = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (!v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.reject = doParallel(_reject);\r\n    async.rejectSeries = doSeries(_reject);\r\n\r\n    var _detect = function (eachfn, arr, iterator, main_callback) {\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x, function (result) {\r\n                if (result) {\r\n                    main_callback(x);\r\n                    main_callback = function () {};\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function (err) {\r\n            main_callback();\r\n        });\r\n    };\r\n    async.detect = doParallel(_detect);\r\n    async.detectSeries = doSeries(_detect);\r\n\r\n    async.some = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (v) {\r\n                    main_callback(true);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(false);\r\n        });\r\n    };\r\n    // any alias\r\n    async.any = async.some;\r\n\r\n    async.every = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (!v) {\r\n                    main_callback(false);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(true);\r\n        });\r\n    };\r\n    // all alias\r\n    async.all = async.every;\r\n\r\n    async.sortBy = function (arr, iterator, callback) {\r\n        async.map(arr, function (x, callback) {\r\n            iterator(x, function (err, criteria) {\r\n                if (err) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    callback(null, {value: x, criteria: criteria});\r\n                }\r\n            });\r\n        }, function (err, results) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            else {\r\n                var fn = function (left, right) {\r\n                    var a = left.criteria, b = right.criteria;\r\n                    return a < b ? -1 : a > b ? 1 : 0;\r\n                };\r\n                callback(null, _map(results.sort(fn), function (x) {\r\n                    return x.value;\r\n                }));\r\n            }\r\n        });\r\n    };\r\n\r\n    async.auto = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        var keys = _keys(tasks);\r\n        if (!keys.length) {\r\n            return callback(null);\r\n        }\r\n\r\n        var results = {};\r\n\r\n        var listeners = [];\r\n        var addListener = function (fn) {\r\n            listeners.unshift(fn);\r\n        };\r\n        var removeListener = function (fn) {\r\n            for (var i = 0; i < listeners.length; i += 1) {\r\n                if (listeners[i] === fn) {\r\n                    listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        var taskComplete = function () {\r\n            _each(listeners.slice(0), function (fn) {\r\n                fn();\r\n            });\r\n        };\r\n\r\n        addListener(function () {\r\n            if (_keys(results).length === keys.length) {\r\n                callback(null, results);\r\n                callback = function () {};\r\n            }\r\n        });\r\n\r\n        _each(keys, function (k) {\r\n            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];\r\n            var taskCallback = function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (args.length <= 1) {\r\n                    args = args[0];\r\n                }\r\n                if (err) {\r\n                    var safeResults = {};\r\n                    _each(_keys(results), function(rkey) {\r\n                        safeResults[rkey] = results[rkey];\r\n                    });\r\n                    safeResults[k] = args;\r\n                    callback(err, safeResults);\r\n                    // stop subsequent errors hitting callback multiple times\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    results[k] = args;\r\n                    async.setImmediate(taskComplete);\r\n                }\r\n            };\r\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\r\n            var ready = function () {\r\n                return _reduce(requires, function (a, x) {\r\n                    return (a && results.hasOwnProperty(x));\r\n                }, true) && !results.hasOwnProperty(k);\r\n            };\r\n            if (ready()) {\r\n                task[task.length - 1](taskCallback, results);\r\n            }\r\n            else {\r\n                var listener = function () {\r\n                    if (ready()) {\r\n                        removeListener(listener);\r\n                        task[task.length - 1](taskCallback, results);\r\n                    }\r\n                };\r\n                addListener(listener);\r\n            }\r\n        });\r\n    };\r\n\r\n    async.waterfall = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor !== Array) {\r\n          var err = new Error('First argument to waterfall must be an array of functions');\r\n          return callback(err);\r\n        }\r\n        if (!tasks.length) {\r\n            return callback();\r\n        }\r\n        var wrapIterator = function (iterator) {\r\n            return function (err) {\r\n                if (err) {\r\n                    callback.apply(null, arguments);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    var next = iterator.next();\r\n                    if (next) {\r\n                        args.push(wrapIterator(next));\r\n                    }\r\n                    else {\r\n                        args.push(callback);\r\n                    }\r\n                    async.setImmediate(function () {\r\n                        iterator.apply(null, args);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n        wrapIterator(async.iterator(tasks))();\r\n    };\r\n\r\n    var _parallel = function(eachfn, tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor === Array) {\r\n            eachfn.map(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            eachfn.each(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.parallel = function (tasks, callback) {\r\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\r\n    };\r\n\r\n    async.parallelLimit = function(tasks, limit, callback) {\r\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\r\n    };\r\n\r\n    async.series = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor === Array) {\r\n            async.mapSeries(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            async.eachSeries(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.iterator = function (tasks) {\r\n        var makeCallback = function (index) {\r\n            var fn = function () {\r\n                if (tasks.length) {\r\n                    tasks[index].apply(null, arguments);\r\n                }\r\n                return fn.next();\r\n            };\r\n            fn.next = function () {\r\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\r\n            };\r\n            return fn;\r\n        };\r\n        return makeCallback(0);\r\n    };\r\n\r\n    async.apply = function (fn) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return function () {\r\n            return fn.apply(\r\n                null, args.concat(Array.prototype.slice.call(arguments))\r\n            );\r\n        };\r\n    };\r\n\r\n    var _concat = function (eachfn, arr, fn, callback) {\r\n        var r = [];\r\n        eachfn(arr, function (x, cb) {\r\n            fn(x, function (err, y) {\r\n                r = r.concat(y || []);\r\n                cb(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, r);\r\n        });\r\n    };\r\n    async.concat = doParallel(_concat);\r\n    async.concatSeries = doSeries(_concat);\r\n\r\n    async.whilst = function (test, iterator, callback) {\r\n        if (test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.whilst(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doWhilst = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            if (test()) {\r\n                async.doWhilst(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.until = function (test, iterator, callback) {\r\n        if (!test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.until(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doUntil = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            if (!test()) {\r\n                async.doUntil(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.queue = function (worker, concurrency) {\r\n        if (concurrency === undefined) {\r\n            concurrency = 1;\r\n        }\r\n        function _insert(q, data, pos, callback) {\r\n          if(data.constructor !== Array) {\r\n              data = [data];\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n\r\n              if (pos) {\r\n                q.tasks.unshift(item);\r\n              } else {\r\n                q.tasks.push(item);\r\n              }\r\n\r\n              if (q.saturated && q.tasks.length === concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n\r\n        var workers = 0;\r\n        var q = {\r\n            tasks: [],\r\n            concurrency: concurrency,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            push: function (data, callback) {\r\n              _insert(q, data, false, callback);\r\n            },\r\n            unshift: function (data, callback) {\r\n              _insert(q, data, true, callback);\r\n            },\r\n            process: function () {\r\n                if (workers < q.concurrency && q.tasks.length) {\r\n                    var task = q.tasks.shift();\r\n                    if (q.empty && q.tasks.length === 0) {\r\n                        q.empty();\r\n                    }\r\n                    workers += 1;\r\n                    var next = function () {\r\n                        workers -= 1;\r\n                        if (task.callback) {\r\n                            task.callback.apply(task, arguments);\r\n                        }\r\n                        if (q.drain && q.tasks.length + workers === 0) {\r\n                            q.drain();\r\n                        }\r\n                        q.process();\r\n                    };\r\n                    var cb = only_once(next);\r\n                    worker(task.data, cb);\r\n                }\r\n            },\r\n            length: function () {\r\n                return q.tasks.length;\r\n            },\r\n            running: function () {\r\n                return workers;\r\n            }\r\n        };\r\n        return q;\r\n    };\r\n\r\n    async.cargo = function (worker, payload) {\r\n        var working     = false,\r\n            tasks       = [];\r\n\r\n        var cargo = {\r\n            tasks: tasks,\r\n            payload: payload,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            push: function (data, callback) {\r\n                if(data.constructor !== Array) {\r\n                    data = [data];\r\n                }\r\n                _each(data, function(task) {\r\n                    tasks.push({\r\n                        data: task,\r\n                        callback: typeof callback === 'function' ? callback : null\r\n                    });\r\n                    if (cargo.saturated && tasks.length === payload) {\r\n                        cargo.saturated();\r\n                    }\r\n                });\r\n                async.setImmediate(cargo.process);\r\n            },\r\n            process: function process() {\r\n                if (working) return;\r\n                if (tasks.length === 0) {\r\n                    if(cargo.drain) cargo.drain();\r\n                    return;\r\n                }\r\n\r\n                var ts = typeof payload === 'number'\r\n                            ? tasks.splice(0, payload)\r\n                            : tasks.splice(0);\r\n\r\n                var ds = _map(ts, function (task) {\r\n                    return task.data;\r\n                });\r\n\r\n                if(cargo.empty) cargo.empty();\r\n                working = true;\r\n                worker(ds, function () {\r\n                    working = false;\r\n\r\n                    var args = arguments;\r\n                    _each(ts, function (data) {\r\n                        if (data.callback) {\r\n                            data.callback.apply(null, args);\r\n                        }\r\n                    });\r\n\r\n                    process();\r\n                });\r\n            },\r\n            length: function () {\r\n                return tasks.length;\r\n            },\r\n            running: function () {\r\n                return working;\r\n            }\r\n        };\r\n        return cargo;\r\n    };\r\n\r\n    var _console_fn = function (name) {\r\n        return function (fn) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            fn.apply(null, args.concat([function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (typeof console !== 'undefined') {\r\n                    if (err) {\r\n                        if (console.error) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                    else if (console[name]) {\r\n                        _each(args, function (x) {\r\n                            console[name](x);\r\n                        });\r\n                    }\r\n                }\r\n            }]));\r\n        };\r\n    };\r\n    async.log = _console_fn('log');\r\n    async.dir = _console_fn('dir');\r\n    /*async.info = _console_fn('info');\r\n    async.warn = _console_fn('warn');\r\n    async.error = _console_fn('error');*/\r\n\r\n    async.memoize = function (fn, hasher) {\r\n        var memo = {};\r\n        var queues = {};\r\n        hasher = hasher || function (x) {\r\n            return x;\r\n        };\r\n        var memoized = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            var key = hasher.apply(null, args);\r\n            if (key in memo) {\r\n                callback.apply(null, memo[key]);\r\n            }\r\n            else if (key in queues) {\r\n                queues[key].push(callback);\r\n            }\r\n            else {\r\n                queues[key] = [callback];\r\n                fn.apply(null, args.concat([function () {\r\n                    memo[key] = arguments;\r\n                    var q = queues[key];\r\n                    delete queues[key];\r\n                    for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, arguments);\r\n                    }\r\n                }]));\r\n            }\r\n        };\r\n        memoized.memo = memo;\r\n        memoized.unmemoized = fn;\r\n        return memoized;\r\n    };\r\n\r\n    async.unmemoize = function (fn) {\r\n      return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n    };\r\n\r\n    async.times = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.map(counter, iterator, callback);\r\n    };\r\n\r\n    async.timesSeries = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.mapSeries(counter, iterator, callback);\r\n    };\r\n\r\n    async.compose = function (/* functions... */) {\r\n        var fns = Array.prototype.reverse.call(arguments);\r\n        return function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            async.reduce(fns, args, function (newargs, fn, cb) {\r\n                fn.apply(that, newargs.concat([function () {\r\n                    var err = arguments[0];\r\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\r\n                    cb(err, nextargs);\r\n                }]))\r\n            },\r\n            function (err, results) {\r\n                callback.apply(that, [err].concat(results));\r\n            });\r\n        };\r\n    };\r\n\r\n    var _applyEach = function (eachfn, fns /*args...*/) {\r\n        var go = function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            return eachfn(fns, function (fn, cb) {\r\n                fn.apply(that, args.concat([cb]));\r\n            },\r\n            callback);\r\n        };\r\n        if (arguments.length > 2) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n    async.applyEach = doParallel(_applyEach);\r\n    async.applyEachSeries = doSeries(_applyEach);\r\n\r\n    async.forever = function (fn, callback) {\r\n        function next(err) {\r\n            if (err) {\r\n                if (callback) {\r\n                    return callback(err);\r\n                }\r\n                throw err;\r\n            }\r\n            fn(next);\r\n        }\r\n        next();\r\n    };\r\n\r\n    // AMD / RequireJS\r\n    if (typeof define !== 'undefined' && define.amd) {\r\n        define([], function () {\r\n            return async;\r\n        });\r\n    }\r\n    // Node.js\r\n    else if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = async;\r\n    }\r\n    // included directly via <script> tag\r\n    else {\r\n        root.async = async;\r\n    }\r\n\r\n}());"
------------------------------------------------
children: [{ type: text, locationSpan: { start: [1, 0], end: [14, 3] }, span: [0, 285], name:  }, { name: async.noConflict, type: function, locationSpan: { start: [14, 3], end: [17, 4] }, span: [286, 385] }, { type: text, locationSpan: { start: [17, 5], end: [19, 3] }, span: [386, 394], name:  }, { name: only_once, type: function, locationSpan: { start: [19, 3], end: [26, 4] }, span: [395, 636] }, { type: text, locationSpan: { start: [26, 5], end: [30, 3] }, span: [637, 698], name:  }, { name: _each, type: function, locationSpan: { start: [30, 3], end: [37, 4] }, span: [699, 926] }, { type: text, locationSpan: { start: [37, 5], end: [39, 3] }, span: [927, 935], name:  }, { name: _map, type: function, locationSpan: { start: [39, 3], end: [48, 4] }, span: [936, 1205] }, { type: text, locationSpan: { start: [48, 5], end: [50, 3] }, span: [1206, 1214], name:  }, { name: _reduce, type: function, locationSpan: { start: [50, 3], end: [58, 4] }, span: [1215, 1474] }, { type: text, locationSpan: { start: [58, 5], end: [60, 3] }, span: [1475, 1483], name:  }, { name: _keys, type: function, locationSpan: { start: [60, 3], end: [71, 4] }, span: [1484, 1770] }, { type: text, locationSpan: { start: [71, 5], end: [78, 11] }, span: [1771, 2025], name:  }, { name: async.nextTick, type: function, locationSpan: { start: [78, 11], end: [81, 12] }, span: [2026, 2169] }, { type: text, locationSpan: { start: [81, 13], end: [85, 11] }, span: [2170, 2261], name:  }, { name: async.nextTick, type: function, locationSpan: { start: [85, 11], end: [87, 12] }, span: [2262, 2344] }, { type: text, locationSpan: { start: [87, 13], end: [101, 3] }, span: [2345, 2672], name:  }, { name: async.each, type: function, locationSpan: { start: [101, 3], end: [121, 4] }, span: [2673, 3320] }, { type: text, locationSpan: { start: [121, 5], end: [124, 3] }, span: [3321, 3362], name:  }, { name: async.eachSeries, type: function, locationSpan: { start: [124, 3], end: [148, 4] }, span: [3363, 4126], children: [{ type: text, locationSpan: { start: [124, 36], end: [130, 7] }, span: [3418, 3574], name:  }, { name: iterate, type: function, locationSpan: { start: [130, 7], end: [146, 8] }, span: [3575, 4098] }, { type: text, locationSpan: { start: [146, 9], end: [148, 3] }, span: [4099, 4125], name:  }] }, { type: text, locationSpan: { start: [148, 5], end: [151, 3] }, span: [4127, 4180], name:  }, { name: async.eachLimit, type: function, locationSpan: { start: [151, 3], end: [154, 4] }, span: [4181, 4337] }, { type: text, locationSpan: { start: [154, 5], end: [157, 3] }, span: [4338, 4389], name:  }, { name: _eachLimit, type: function, locationSpan: { start: [157, 3], end: [195, 4] }, span: [4390, 5712], children: [{ type: text, locationSpan: { start: [157, 18], end: [168, 12] }, span: [4425, 4737], name:  }, { name: replenish, type: function, locationSpan: { start: [168, 12], end: [193, 12] }, span: [4738, 5689] }, { type: text, locationSpan: { start: [193, 13], end: [195, 3] }, span: [5690, 5711], name:  }] }, { type: text, locationSpan: { start: [195, 5], end: [198, 3] }, span: [5713, 5723], name:  }, { name: doParallel, type: function, locationSpan: { start: [198, 3], end: [203, 4] }, span: [5724, 5930] }, { type: text, locationSpan: { start: [203, 5], end: [204, 3] }, span: [5931, 5937], name:  }, { name: doParallelLimit, type: function, locationSpan: { start: [204, 3], end: [209, 4] }, span: [5938, 6162] }, { type: text, locationSpan: { start: [209, 5], end: [210, 3] }, span: [6163, 6169], name:  }, { name: doSeries, type: function, locationSpan: { start: [210, 3], end: [215, 4] }, span: [6170, 6380] }, { type: text, locationSpan: { start: [215, 5], end: [218, 3] }, span: [6381, 6391], name:  }, { name: _asyncMap, type: function, locationSpan: { start: [218, 3], end: [231, 4] }, span: [6392, 6847] }, { type: text, locationSpan: { start: [231, 5], end: [234, 3] }, span: [6848, 6938], name:  }, { name: async.mapLimit, type: function, locationSpan: { start: [234, 3], end: [236, 4] }, span: [6939, 7064] }, { type: text, locationSpan: { start: [236, 5], end: [238, 3] }, span: [7065, 7073], name:  }, { name: _mapLimit, type: function, locationSpan: { start: [238, 3], end: [240, 4] }, span: [7074, 7164] }, { type: text, locationSpan: { start: [240, 5], end: [244, 3] }, span: [7165, 7282], name:  }, { name: async.reduce, type: function, locationSpan: { start: [244, 3], end: [253, 4] }, span: [7283, 7605] }, { type: text, locationSpan: { start: [253, 5], end: [259, 3] }, span: [7606, 7722], name:  }, { name: async.reduceRight, type: function, locationSpan: { start: [259, 3], end: [264, 4] }, span: [7723, 7945] }, { type: text, locationSpan: { start: [264, 5], end: [268, 3] }, span: [7946, 8012], name:  }, { name: _filter, type: function, locationSpan: { start: [268, 3], end: [287, 4] }, span: [8013, 8649] }, { type: text, locationSpan: { start: [287, 5], end: [294, 3] }, span: [8650, 8845], name:  }, { name: _reject, type: function, locationSpan: { start: [294, 3], end: [313, 4] }, span: [8846, 9483] }, { type: text, locationSpan: { start: [313, 5], end: [317, 3] }, span: [9484, 9578], name:  }, { name: _detect, type: function, locationSpan: { start: [317, 3], end: [331, 4] }, span: [9579, 10046] }, { type: text, locationSpan: { start: [331, 5], end: [335, 3] }, span: [10047, 10141], name:  }, { name: async.some, type: function, locationSpan: { start: [335, 3], end: [347, 4] }, span: [10142, 10555] }, { type: text, locationSpan: { start: [347, 5], end: [351, 3] }, span: [10556, 10611], name:  }, { name: async.every, type: function, locationSpan: { start: [351, 3], end: [363, 4] }, span: [10612, 11027] }, { type: text, locationSpan: { start: [363, 5], end: [367, 3] }, span: [11028, 11084], name:  }, { name: async.sortBy, type: function, locationSpan: { start: [367, 3], end: [391, 4] }, span: [11085, 11939], children: [{ type: text, locationSpan: { start: [367, 36], end: [382, 15] }, span: [11136, 11602], name:  }, { name: fn, type: function, locationSpan: { start: [382, 15], end: [385, 16] }, span: [11603, 11774] }, { type: text, locationSpan: { start: [385, 17], end: [391, 3] }, span: [11775, 11938], name:  }] }, { type: text, locationSpan: { start: [391, 5], end: [393, 3] }, span: [11940, 11948], name:  }, { name: async.auto, type: function, locationSpan: { start: [393, 3], end: [468, 4] }, span: [11949, 14627], children: [{ type: text, locationSpan: { start: [393, 28], end: [403, 7] }, span: [11990, 12217], name:  }, { name: addListener, type: function, locationSpan: { start: [403, 7], end: [405, 8] }, span: [12218, 12297] }, { type: text, locationSpan: { start: [405, 9], end: [406, 7] }, span: [12298, 12308], name:  }, { name: removeListener, type: function, locationSpan: { start: [406, 7], end: [413, 8] }, span: [12309, 12568] }, { type: text, locationSpan: { start: [413, 9], end: [414, 7] }, span: [12569, 12579], name:  }, { name: taskComplete, type: function, locationSpan: { start: [414, 7], end: [418, 8] }, span: [12580, 12717] }, { type: text, locationSpan: { start: [418, 9], end: [429, 11] }, span: [12718, 13058], name:  }, { name: taskCallback, type: function, locationSpan: { start: [429, 11], end: [448, 12] }, span: [13059, 13868] }, { type: text, locationSpan: { start: [448, 13], end: [450, 11] }, span: [13869, 13959], name:  }, { name: ready, type: function, locationSpan: { start: [450, 11], end: [454, 12] }, span: [13960, 14178] }, { type: text, locationSpan: { start: [454, 13], end: [459, 15] }, span: [14179, 14323], name:  }, { name: listener, type: function, locationSpan: { start: [459, 15], end: [464, 16] }, span: [14324, 14551] }, { type: text, locationSpan: { start: [464, 17], end: [468, 3] }, span: [14552, 14626], name:  }] }, { type: text, locationSpan: { start: [468, 5], end: [470, 3] }, span: [14628, 14636], name:  }, { name: async.waterfall, type: function, locationSpan: { start: [470, 3], end: [501, 4] }, span: [14637, 15810], children: [{ type: text, locationSpan: { start: [470, 28], end: [479, 7] }, span: [14683, 14994], name:  }, { name: wrapIterator, type: function, locationSpan: { start: [479, 7], end: [499, 8] }, span: [14995, 15754] }, { type: text, locationSpan: { start: [499, 9], end: [501, 3] }, span: [15755, 15809], name:  }] }, { type: text, locationSpan: { start: [501, 5], end: [503, 3] }, span: [15811, 15819], name:  }, { name: _parallel, type: function, locationSpan: { start: [503, 3], end: [533, 4] }, span: [15820, 16968] }, { type: text, locationSpan: { start: [533, 5], end: [535, 3] }, span: [16969, 16977], name:  }, { name: async.parallel, type: function, locationSpan: { start: [535, 3], end: [537, 4] }, span: [16978, 17104] }, { type: text, locationSpan: { start: [537, 5], end: [539, 3] }, span: [17105, 17113], name:  }, { name: async.parallelLimit, type: function, locationSpan: { start: [539, 3], end: [541, 4] }, span: [17114, 17265] }, { type: text, locationSpan: { start: [541, 5], end: [543, 3] }, span: [17266, 17274], name:  }, { name: async.series, type: function, locationSpan: { start: [543, 3], end: [573, 4] }, span: [17275, 18425] }, { type: text, locationSpan: { start: [573, 5], end: [575, 3] }, span: [18426, 18434], name:  }, { name: async.iterator, type: function, locationSpan: { start: [575, 3], end: [589, 4] }, span: [18435, 18930], children: [{ type: text, locationSpan: { start: [575, 18], end: [576, 7] }, span: [18470, 18479], name:  }, { name: makeCallback, type: function, locationSpan: { start: [576, 7], end: [587, 8] }, span: [18480, 18889], children: [{ type: text, locationSpan: { start: [576, 18], end: [577, 11] }, span: [18517, 18530], name:  }, { name: fn, type: function, locationSpan: { start: [577, 11], end: [582, 12] }, span: [18531, 18716] }, { type: text, locationSpan: { start: [582, 13], end: [583, 11] }, span: [18717, 18731], name:  }, { name: fn.next, type: function, locationSpan: { start: [583, 11], end: [585, 12] }, span: [18732, 18853] }, { type: text, locationSpan: { start: [585, 13], end: [587, 7] }, span: [18854, 18888], name:  }] }, { type: text, locationSpan: { start: [587, 9], end: [589, 3] }, span: [18890, 18929], name:  }] }, { type: text, locationSpan: { start: [589, 5], end: [591, 3] }, span: [18931, 18939], name:  }, { name: async.apply, type: function, locationSpan: { start: [591, 3], end: [598, 4] }, span: [18940, 19199] }, { type: text, locationSpan: { start: [598, 5], end: [600, 3] }, span: [19200, 19208], name:  }, { name: _concat, type: function, locationSpan: { start: [600, 3], end: [610, 4] }, span: [19209, 19523] }, { type: text, locationSpan: { start: [610, 5], end: [614, 3] }, span: [19524, 19618], name:  }, { name: async.whilst, type: function, locationSpan: { start: [614, 3], end: [626, 4] }, span: [19619, 19966] }, { type: text, locationSpan: { start: [626, 5], end: [628, 3] }, span: [19967, 19975], name:  }, { name: async.doWhilst, type: function, locationSpan: { start: [628, 3], end: [640, 4] }, span: [19976, 20327] }, { type: text, locationSpan: { start: [640, 5], end: [642, 3] }, span: [20328, 20336], name:  }, { name: async.until, type: function, locationSpan: { start: [642, 3], end: [654, 4] }, span: [20337, 20683] }, { type: text, locationSpan: { start: [654, 5], end: [656, 3] }, span: [20684, 20692], name:  }, { name: async.doUntil, type: function, locationSpan: { start: [656, 3], end: [668, 4] }, span: [20693, 21043] }, { type: text, locationSpan: { start: [668, 5], end: [670, 3] }, span: [21044, 21052], name:  }, { name: async.queue, type: function, locationSpan: { start: [670, 3], end: [739, 4] }, span: [21053, 23346], children: [{ type: text, locationSpan: { start: [670, 32], end: [674, 7] }, span: [21099, 21191], name:  }, { name: _insert, type: function, locationSpan: { start: [674, 7], end: [695, 8] }, span: [21192, 21854] }, { type: text, locationSpan: { start: [695, 9], end: [704, 17] }, span: [21855, 22066], name:  }, { name: push, type: function, locationSpan: { start: [704, 17], end: [706, 12] }, span: [22067, 22158] }, { type: text, locationSpan: { start: [706, 13], end: [707, 20] }, span: [22159, 22182], name:  }, { name: unshift, type: function, locationSpan: { start: [707, 20], end: [709, 12] }, span: [22183, 22273] }, { type: text, locationSpan: { start: [709, 13], end: [710, 20] }, span: [22274, 22297], name:  }, { name: process, type: function, locationSpan: { start: [710, 20], end: [730, 12] }, span: [22298, 23132], children: [{ type: text, locationSpan: { start: [710, 13], end: [717, 19] }, span: [22311, 22601], name:  }, { name: next, type: function, locationSpan: { start: [717, 19], end: [726, 20] }, span: [22602, 23006] }, { type: text, locationSpan: { start: [726, 21], end: [730, 11] }, span: [23007, 23131], name:  }] }, { type: text, locationSpan: { start: [730, 13], end: [731, 19] }, span: [23133, 23155], name:  }, { name: length, type: function, locationSpan: { start: [731, 19], end: [733, 12] }, span: [23156, 23223] }, { type: text, locationSpan: { start: [733, 13], end: [734, 20] }, span: [23224, 23247], name:  }, { name: running, type: function, locationSpan: { start: [734, 20], end: [736, 12] }, span: [23248, 23308] }, { type: text, locationSpan: { start: [736, 13], end: [739, 3] }, span: [23309, 23345], name:  }] }, { type: text, locationSpan: { start: [739, 5], end: [741, 3] }, span: [23347, 23355], name:  }, { name: async.cargo, type: function, locationSpan: { start: [741, 3], end: [804, 4] }, span: [23356, 25435], children: [{ type: text, locationSpan: { start: [741, 28], end: [751, 17] }, span: [23398, 23647], name:  }, { name: push, type: function, locationSpan: { start: [751, 17], end: [765, 12] }, span: [23648, 24232] }, { type: text, locationSpan: { start: [765, 13], end: [766, 20] }, span: [24233, 24256], name:  }, { name: process, type: function, locationSpan: { start: [766, 20], end: [795, 12] }, span: [24257, 25219] }, { type: text, locationSpan: { start: [795, 13], end: [796, 19] }, span: [25220, 25242], name:  }, { name: length, type: function, locationSpan: { start: [796, 19], end: [798, 12] }, span: [25243, 25308] }, { type: text, locationSpan: { start: [798, 13], end: [799, 20] }, span: [25309, 25332], name:  }, { name: running, type: function, locationSpan: { start: [799, 20], end: [801, 12] }, span: [25333, 25393] }, { type: text, locationSpan: { start: [801, 13], end: [804, 3] }, span: [25394, 25434], name:  }] }, { type: text, locationSpan: { start: [804, 5], end: [806, 3] }, span: [25436, 25444], name:  }, { name: _console_fn, type: function, locationSpan: { start: [806, 3], end: [825, 4] }, span: [25445, 26192] }, { type: text, locationSpan: { start: [825, 5], end: [832, 3] }, span: [26193, 26398], name:  }, { name: async.memoize, type: function, locationSpan: { start: [832, 3], end: [863, 4] }, span: [26399, 27489], children: [{ type: text, locationSpan: { start: [832, 23], end: [838, 7] }, span: [26438, 26575], name:  }, { name: memoized, type: function, locationSpan: { start: [838, 7], end: [859, 8] }, span: [26576, 27389] }, { type: text, locationSpan: { start: [859, 9], end: [863, 3] }, span: [27390, 27488], name:  }] }, { type: text, locationSpan: { start: [863, 5], end: [865, 3] }, span: [27490, 27498], name:  }, { name: async.unmemoize, type: function, locationSpan: { start: [865, 3], end: [869, 4] }, span: [27499, 27638] }, { type: text, locationSpan: { start: [869, 5], end: [871, 3] }, span: [27639, 27647], name:  }, { name: async.times, type: function, locationSpan: { start: [871, 3], end: [877, 4] }, span: [27648, 27873] }, { type: text, locationSpan: { start: [877, 5], end: [879, 3] }, span: [27874, 27882], name:  }, { name: async.timesSeries, type: function, locationSpan: { start: [879, 3], end: [885, 4] }, span: [27883, 28120] }, { type: text, locationSpan: { start: [885, 5], end: [887, 3] }, span: [28121, 28129], name:  }, { name: async.compose, type: function, locationSpan: { start: [887, 3], end: [904, 4] }, span: [28130, 28865] }, { type: text, locationSpan: { start: [904, 5], end: [906, 3] }, span: [28866, 28874], name:  }, { name: _applyEach, type: function, locationSpan: { start: [906, 3], end: [923, 4] }, span: [28875, 29462], children: [{ type: text, locationSpan: { start: [906, 36], end: [907, 7] }, span: [28928, 28937], name:  }, { name: go, type: function, locationSpan: { start: [907, 7], end: [915, 8] }, span: [28938, 29247] }, { type: text, locationSpan: { start: [915, 9], end: [923, 3] }, span: [29248, 29461], name:  }] }, { type: text, locationSpan: { start: [923, 5], end: [927, 3] }, span: [29463, 29569], name:  }, { name: async.forever, type: function, locationSpan: { start: [927, 3], end: [938, 4] }, span: [29570, 29860], children: [{ type: text, locationSpan: { start: [927, 25], end: [928, 7] }, span: [29611, 29620], name:  }, { name: next, type: function, locationSpan: { start: [928, 7], end: [936, 8] }, span: [29621, 29836] }, { type: text, locationSpan: { start: [936, 9], end: [938, 3] }, span: [29837, 29859], name:  }] }, { type: text, locationSpan: { start: [938, 5], end: [955, 4] }, span: [29861, 30245], name:  }]
locationSpan: { start: [1, 0], end: [955, 4] }
footerSpan: [0, -1]
span: [0, 30245]
name: 'C:\Users\gimenete\Documents\semanticmerge\testfiles\dest.js'
type: file
parsingErrorsDetected: false

fileIn = "/*global setImmediate: false, setTimeout: false, console: false */\r\n(function () {\r\n\r\n    var async = {};\r\n\r\n    // global on the server, window in the browser\r\n    var root, previous_async;\r\n\r\n    root = this;\r\n    if (root != null) {\r\n      previous_async = root.async;\r\n    }\r\n\r\n    async.noConflict = function () {\r\n        root.async = previous_async;\r\n        return async;\r\n    };\r\n\r\n    function only_once(fn) {\r\n        var called = false;\r\n        return function() {\r\n            if (called) throw new Error(\"Callback was already called.\");\r\n            called = true;\r\n            fn.apply(root, arguments);\r\n        }\r\n    }\r\n\r\n    //// cross-browser compatiblity functions ////\r\n\r\n    var _each = function (arr, iterator) {\r\n        if (arr.forEach) {\r\n            return arr.forEach(iterator);\r\n        }\r\n        for (var i = 0; i < arr.length; i += 1) {\r\n            iterator(arr[i], i, arr);\r\n        }\r\n    };\r\n\r\n    var _map = function (arr, iterator) {\r\n        if (arr.map) {\r\n            return arr.map(iterator);\r\n        }\r\n        var results = [];\r\n        _each(arr, function (x, i, a) {\r\n            results.push(iterator(x, i, a));\r\n        });\r\n        return results;\r\n    };\r\n\r\n    var _reduce = function (arr, iterator, memo) {\r\n        if (arr.reduce) {\r\n            return arr.reduce(iterator, memo);\r\n        }\r\n        _each(arr, function (x, i, a) {\r\n            memo = iterator(memo, x, i, a);\r\n        });\r\n        return memo;\r\n    };\r\n\r\n    var _keys = function (obj) {\r\n        if (Object.keys) {\r\n            return Object.keys(obj);\r\n        }\r\n        var keys = [];\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {\r\n                keys.push(k);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n\r\n    //// exported async module functions ////\r\n\r\n    //// nextTick implementation with browser-compatible fallback ////\r\n    if (typeof process === 'undefined' || !(process.nextTick)) {\r\n        if (typeof setImmediate === 'function') {\r\n            async.nextTick = function (fn) {\r\n                // not a direct alias for IE10 compatibility\r\n                setImmediate(fn);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n        else {\r\n            async.nextTick = function (fn) {\r\n                setTimeout(fn, 0);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n    else {\r\n        async.nextTick = process.nextTick;\r\n        if (typeof setImmediate !== 'undefined') {\r\n            async.setImmediate = setImmediate;\r\n        }\r\n        else {\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n\r\n    async.each = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        _each(arr, function (x) {\r\n            iterator(x, only_once(function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback(null);\r\n                    }\r\n                }\r\n            }));\r\n        });\r\n    };\r\n    async.forEach = async.each;\r\n\r\n    async.eachSeries = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        var iterate = function () {\r\n            iterator(arr[completed], function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback(null);\r\n                    }\r\n                    else {\r\n                        iterate();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        iterate();\r\n    };\r\n    async.forEachSeries = async.eachSeries;\r\n\r\n    async.eachLimit = function (arr, limit, iterator, callback) {\r\n        var fn = _eachLimit(limit);\r\n        fn.apply(null, [arr, iterator, callback]);\r\n    };\r\n    async.forEachLimit = async.eachLimit;\r\n\r\n    var _eachLimit = function (limit) {\r\n\r\n        return function (arr, iterator, callback) {\r\n            callback = callback || function () {};\r\n            if (!arr.length || limit <= 0) {\r\n                return callback();\r\n            }\r\n            var completed = 0;\r\n            var started = 0;\r\n            var running = 0;\r\n\r\n            (function replenish () {\r\n                if (completed >= arr.length) {\r\n                    return callback();\r\n                }\r\n\r\n                while (running < limit && started < arr.length) {\r\n                    started += 1;\r\n                    running += 1;\r\n                    iterator(arr[started - 1], function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            callback = function () {};\r\n                        }\r\n                        else {\r\n                            completed += 1;\r\n                            running -= 1;\r\n                            if (completed >= arr.length) {\r\n                                callback();\r\n                            }\r\n                            else {\r\n                                replenish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n        };\r\n    };\r\n\r\n\r\n    var doParallel = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.each].concat(args));\r\n        };\r\n    };\r\n    var doParallelLimit = function(limit, fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\r\n        };\r\n    };\r\n    var doSeries = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.eachSeries].concat(args));\r\n        };\r\n    };\r\n\r\n\r\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (err, v) {\r\n                results[x.index] = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, results);\r\n        });\r\n    };\r\n    async.map = doParallel(_asyncMap);\r\n    async.mapSeries = doSeries(_asyncMap);\r\n    async.mapLimit = function (arr, limit, iterator, callback) {\r\n        return _mapLimit(limit)(arr, iterator, callback);\r\n    };\r\n\r\n    var _mapLimit = function(limit) {\r\n        return doParallelLimit(limit, _asyncMap);\r\n    };\r\n\r\n    // reduce only has a series version, as doing reduce in parallel won't\r\n    // work in many situations.\r\n    async.reduce = function (arr, memo, iterator, callback) {\r\n        async.eachSeries(arr, function (x, callback) {\r\n            iterator(memo, x, function (err, v) {\r\n                memo = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, memo);\r\n        });\r\n    };\r\n    // inject alias\r\n    async.inject = async.reduce;\r\n    // foldl alias\r\n    async.foldl = async.reduce;\r\n\r\n    async.reduceRight = function (arr, memo, iterator, callback) {\r\n        var reversed = _map(arr, function (x) {\r\n            return x;\r\n        }).reverse();\r\n        async.reduce(reversed, memo, iterator, callback);\r\n    };\r\n    // foldr alias\r\n    async.foldr = async.reduceRight;\r\n\r\n    var _filter = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.filter = doParallel(_filter);\r\n    async.filterSeries = doSeries(_filter);\r\n    // select alias\r\n    async.select = async.filter;\r\n    async.selectSeries = async.filterSeries;\r\n\r\n    var _reject = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (!v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.reject = doParallel(_reject);\r\n    async.rejectSeries = doSeries(_reject);\r\n\r\n    var _detect = function (eachfn, arr, iterator, main_callback) {\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x, function (result) {\r\n                if (result) {\r\n                    main_callback(x);\r\n                    main_callback = function () {};\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function (err) {\r\n            main_callback();\r\n        });\r\n    };\r\n    async.detect = doParallel(_detect);\r\n    async.detectSeries = doSeries(_detect);\r\n\r\n    async.some = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (v) {\r\n                    main_callback(true);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(false);\r\n        });\r\n    };\r\n    // any alias\r\n    async.any = async.some;\r\n\r\n    async.every = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (!v) {\r\n                    main_callback(false);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(true);\r\n        });\r\n    };\r\n    // all alias\r\n    async.all = async.every;\r\n\r\n    async.sortBy = function (arr, iterator, callback) {\r\n        async.map(arr, function (x, callback) {\r\n            iterator(x, function (err, criteria) {\r\n                if (err) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    callback(null, {value: x, criteria: criteria});\r\n                }\r\n            });\r\n        }, function (err, results) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            else {\r\n                var fn = function (left, right) {\r\n                    var a = left.criteria, b = right.criteria;\r\n                    return a < b ? -1 : a > b ? 1 : 0;\r\n                };\r\n                callback(null, _map(results.sort(fn), function (x) {\r\n                    return x.value;\r\n                }));\r\n            }\r\n        });\r\n    };\r\n\r\n    async.auto = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        var keys = _keys(tasks);\r\n        if (!keys.length) {\r\n            return callback(null);\r\n        }\r\n\r\n        var results = {};\r\n\r\n        var listeners = [];\r\n        var addListener = function (fn) {\r\n            listeners.unshift(fn);\r\n        };\r\n        var removeListener = function (fn) {\r\n            for (var i = 0; i < listeners.length; i += 1) {\r\n                if (listeners[i] === fn) {\r\n                    listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        var taskComplete = function () {\r\n            _each(listeners.slice(0), function (fn) {\r\n                fn();\r\n            });\r\n        };\r\n\r\n        addListener(function () {\r\n            if (_keys(results).length === keys.length) {\r\n                callback(null, results);\r\n                callback = function () {};\r\n            }\r\n        });\r\n\r\n        _each(keys, function (k) {\r\n            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];\r\n            var taskCallback = function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (args.length <= 1) {\r\n                    args = args[0];\r\n                }\r\n                if (err) {\r\n                    var safeResults = {};\r\n                    _each(_keys(results), function(rkey) {\r\n                        safeResults[rkey] = results[rkey];\r\n                    });\r\n                    safeResults[k] = args;\r\n                    callback(err, safeResults);\r\n                    // stop subsequent errors hitting callback multiple times\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    results[k] = args;\r\n                    async.setImmediate(taskComplete);\r\n                }\r\n            };\r\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\r\n            var ready = function () {\r\n                return _reduce(requires, function (a, x) {\r\n                    return (a && results.hasOwnProperty(x));\r\n                }, true) && !results.hasOwnProperty(k);\r\n            };\r\n            if (ready()) {\r\n                task[task.length - 1](taskCallback, results);\r\n            }\r\n            else {\r\n                var listener = function () {\r\n                    if (ready()) {\r\n                        removeListener(listener);\r\n                        task[task.length - 1](taskCallback, results);\r\n                    }\r\n                };\r\n                addListener(listener);\r\n            }\r\n        });\r\n    };\r\n\r\n    async.waterfall = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor !== Array) {\r\n          var err = new Error('First argument to waterfall must be an array of functions');\r\n          return callback(err);\r\n        }\r\n        if (!tasks.length) {\r\n            return callback();\r\n        }\r\n        var wrapIterator = function (iterator) {\r\n            return function (err) {\r\n                if (err) {\r\n                    callback.apply(null, arguments);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    var next = iterator.next();\r\n                    if (next) {\r\n                        args.push(wrapIterator(next));\r\n                    }\r\n                    else {\r\n                        args.push(callback);\r\n                    }\r\n                    async.setImmediate(function () {\r\n                        iterator.apply(null, args);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n        wrapIterator(async.iterator(tasks))();\r\n    };\r\n\r\n    var _parallel = function(eachfn, tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor === Array) {\r\n            eachfn.map(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            eachfn.each(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.parallel = function (tasks, callback) {\r\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\r\n    };\r\n\r\n    async.parallelLimit = function(tasks, limit, callback) {\r\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\r\n    };\r\n\r\n    async.series = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (tasks.constructor === Array) {\r\n            async.mapSeries(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            async.eachSeries(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.iterator = function (tasks) {\r\n        var makeCallback = function (index) {\r\n            var fn = function () {\r\n                if (tasks.length) {\r\n                    tasks[index].apply(null, arguments);\r\n                }\r\n                return fn.next();\r\n            };\r\n            fn.next = function () {\r\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\r\n            };\r\n            return fn;\r\n        };\r\n        return makeCallback(0);\r\n    };\r\n\r\n    async.apply = function (fn) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return function () {\r\n            return fn.apply(\r\n                null, args.concat(Array.prototype.slice.call(arguments))\r\n            );\r\n        };\r\n    };\r\n\r\n    var _concat = function (eachfn, arr, fn, callback) {\r\n        var r = [];\r\n        eachfn(arr, function (x, cb) {\r\n            fn(x, function (err, y) {\r\n                r = r.concat(y || []);\r\n                cb(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, r);\r\n        });\r\n    };\r\n    async.concat = doParallel(_concat);\r\n    async.concatSeries = doSeries(_concat);\r\n\r\n    async.whilst = function (test, iterator, callback) {\r\n        if (test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.whilst(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doWhilst = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            if (test()) {\r\n                async.doWhilst(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.until = function (test, iterator, callback) {\r\n        if (!test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.until(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doUntil = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            if (!test()) {\r\n                async.doUntil(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.queue = function (worker, concurrency) {\r\n        if (concurrency === undefined) {\r\n            concurrency = 1;\r\n        }\r\n        function _insert(q, data, pos, callback) {\r\n          if(data.constructor !== Array) {\r\n              data = [data];\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n\r\n              if (pos) {\r\n                q.tasks.unshift(item);\r\n              } else {\r\n                q.tasks.push(item);\r\n              }\r\n\r\n              if (q.saturated && q.tasks.length === concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n\r\n        var workers = 0;\r\n        var q = {\r\n            tasks: [],\r\n            concurrency: concurrency,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            push: function (data, callback) {\r\n              _insert(q, data, false, callback);\r\n            },\r\n            unshift: function (data, callback) {\r\n              _insert(q, data, true, callback);\r\n            },\r\n            process: function () {\r\n                if (workers < q.concurrency && q.tasks.length) {\r\n                    var task = q.tasks.shift();\r\n                    if (q.empty && q.tasks.length === 0) {\r\n                        q.empty();\r\n                    }\r\n                    workers += 1;\r\n                    var next = function () {\r\n                        workers -= 1;\r\n                        if (task.callback) {\r\n                            task.callback.apply(task, arguments);\r\n                        }\r\n                        if (q.drain && q.tasks.length + workers === 0) {\r\n                            q.drain();\r\n                        }\r\n                        q.process();\r\n                    };\r\n                    var cb = only_once(next);\r\n                    worker(task.data, cb);\r\n                }\r\n            },\r\n            length: function () {\r\n                return q.tasks.length;\r\n            },\r\n            running: function () {\r\n                return workers;\r\n            }\r\n        };\r\n        return q;\r\n    };\r\n\r\n    async.cargo = function (worker, payload) {\r\n        var working     = false,\r\n            tasks       = [];\r\n\r\n        var cargo = {\r\n            tasks: tasks,\r\n            payload: payload,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            push: function (data, callback) {\r\n                if(data.constructor !== Array) {\r\n                    data = [data];\r\n                }\r\n                _each(data, function(task) {\r\n                    tasks.push({\r\n                        data: task,\r\n                        callback: typeof callback === 'function' ? callback : null\r\n                    });\r\n                    if (cargo.saturated && tasks.length === payload) {\r\n                        cargo.saturated();\r\n                    }\r\n                });\r\n                async.setImmediate(cargo.process);\r\n            },\r\n            process: function process() {\r\n                if (working) return;\r\n                if (tasks.length === 0) {\r\n                    if(cargo.drain) cargo.drain();\r\n                    return;\r\n                }\r\n\r\n                var ts = typeof payload === 'number'\r\n                            ? tasks.splice(0, payload)\r\n                            : tasks.splice(0);\r\n\r\n                var ds = _map(ts, function (task) {\r\n                    return task.data;\r\n                });\r\n\r\n                if(cargo.empty) cargo.empty();\r\n                working = true;\r\n                worker(ds, function () {\r\n                    working = false;\r\n\r\n                    var args = arguments;\r\n                    _each(ts, function (data) {\r\n                        if (data.callback) {\r\n                            data.callback.apply(null, args);\r\n                        }\r\n                    });\r\n\r\n                    process();\r\n                });\r\n            },\r\n            length: function () {\r\n                return tasks.length;\r\n            },\r\n            running: function () {\r\n                return working;\r\n            }\r\n        };\r\n        return cargo;\r\n    };\r\n\r\n    var _console_fn = function (name) {\r\n        return function (fn) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            fn.apply(null, args.concat([function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (typeof console !== 'undefined') {\r\n                    if (err) {\r\n                        if (console.error) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                    else if (console[name]) {\r\n                        _each(args, function (x) {\r\n                            console[name](x);\r\n                        });\r\n                    }\r\n                }\r\n            }]));\r\n        };\r\n    };\r\n    async.log = _console_fn('log');\r\n    async.dir = _console_fn('dir');\r\n    /*async.info = _console_fn('info');\r\n    async.warn = _console_fn('warn');\r\n    async.error = _console_fn('error');*/\r\n\r\n    async.memoize = function (fn, hasher) {\r\n        var memo = {};\r\n        var queues = {};\r\n        hasher = hasher || function (x) {\r\n            return x;\r\n        };\r\n        var memoized = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            var key = hasher.apply(null, args);\r\n            if (key in memo) {\r\n                callback.apply(null, memo[key]);\r\n            }\r\n            else if (key in queues) {\r\n                queues[key].push(callback);\r\n            }\r\n            else {\r\n                queues[key] = [callback];\r\n                fn.apply(null, args.concat([function () {\r\n                    memo[key] = arguments;\r\n                    var q = queues[key];\r\n                    delete queues[key];\r\n                    for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, arguments);\r\n                    }\r\n                }]));\r\n            }\r\n        };\r\n        memoized.memo = memo;\r\n        memoized.unmemoized = fn;\r\n        return memoized;\r\n    };\r\n\r\n    async.unmemoize = function (fn) {\r\n      return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n    };\r\n\r\n    async.times = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.map(counter, iterator, callback);\r\n    };\r\n\r\n    async.timesSeries = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.mapSeries(counter, iterator, callback);\r\n    };\r\n\r\n    async.compose = function (/* functions... */) {\r\n        var fns = Array.prototype.reverse.call(arguments);\r\n        return function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            async.reduce(fns, args, function (newargs, fn, cb) {\r\n                fn.apply(that, newargs.concat([function () {\r\n                    var err = arguments[0];\r\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\r\n                    cb(err, nextargs);\r\n                }]))\r\n            },\r\n            function (err, results) {\r\n                callback.apply(that, [err].concat(results));\r\n            });\r\n        };\r\n    };\r\n\r\n    var _applyEach = function (eachfn, fns /*args...*/) {\r\n        var go = function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            return eachfn(fns, function (fn, cb) {\r\n                fn.apply(that, args.concat([cb]));\r\n            },\r\n            callback);\r\n        };\r\n        if (arguments.length > 2) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n    async.applyEach = doParallel(_applyEach);\r\n    async.applyEachSeries = doSeries(_applyEach);\r\n\r\n    async.forever = function (fn, callback) {\r\n        function next(err) {\r\n            if (err) {\r\n                if (callback) {\r\n                    return callback(err);\r\n                }\r\n                throw err;\r\n            }\r\n            fn(next);\r\n        }\r\n        next();\r\n    };\r\n\r\n    // AMD / RequireJS\r\n    if (typeof define !== 'undefined' && define.amd) {\r\n        define([], function () {\r\n            return async;\r\n        });\r\n    }\r\n    // Node.js\r\n    else if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = async;\r\n    }\r\n    // included directly via <script> tag\r\n    else {\r\n        root.async = async;\r\n    }\r\n\r\n}());"
------------------------------------------------
children: [{ type: text, locationSpan: { start: [1, 0], end: [14, 3] }, span: [0, 285], name:  }, { name: async.noConflict, type: function, locationSpan: { start: [14, 3], end: [17, 4] }, span: [286, 385] }, { type: text, locationSpan: { start: [17, 5], end: [19, 3] }, span: [386, 394], name:  }, { name: only_once, type: function, locationSpan: { start: [19, 3], end: [26, 4] }, span: [395, 636] }, { type: text, locationSpan: { start: [26, 5], end: [30, 3] }, span: [637, 698], name:  }, { name: _each, type: function, locationSpan: { start: [30, 3], end: [37, 4] }, span: [699, 926] }, { type: text, locationSpan: { start: [37, 5], end: [39, 3] }, span: [927, 935], name:  }, { name: _map, type: function, locationSpan: { start: [39, 3], end: [48, 4] }, span: [936, 1205] }, { type: text, locationSpan: { start: [48, 5], end: [50, 3] }, span: [1206, 1214], name:  }, { name: _reduce, type: function, locationSpan: { start: [50, 3], end: [58, 4] }, span: [1215, 1474] }, { type: text, locationSpan: { start: [58, 5], end: [60, 3] }, span: [1475, 1483], name:  }, { name: _keys, type: function, locationSpan: { start: [60, 3], end: [71, 4] }, span: [1484, 1770] }, { type: text, locationSpan: { start: [71, 5], end: [78, 11] }, span: [1771, 2025], name:  }, { name: async.nextTick, type: function, locationSpan: { start: [78, 11], end: [81, 12] }, span: [2026, 2169] }, { type: text, locationSpan: { start: [81, 13], end: [85, 11] }, span: [2170, 2261], name:  }, { name: async.nextTick, type: function, locationSpan: { start: [85, 11], end: [87, 12] }, span: [2262, 2344] }, { type: text, locationSpan: { start: [87, 13], end: [101, 3] }, span: [2345, 2672], name:  }, { name: async.each, type: function, locationSpan: { start: [101, 3], end: [121, 4] }, span: [2673, 3320] }, { type: text, locationSpan: { start: [121, 5], end: [124, 3] }, span: [3321, 3362], name:  }, { name: async.eachSeries, type: function, locationSpan: { start: [124, 3], end: [148, 4] }, span: [3363, 4126], children: [{ type: text, locationSpan: { start: [124, 36], end: [130, 7] }, span: [3418, 3574], name:  }, { name: iterate, type: function, locationSpan: { start: [130, 7], end: [146, 8] }, span: [3575, 4098] }, { type: text, locationSpan: { start: [146, 9], end: [148, 3] }, span: [4099, 4125], name:  }] }, { type: text, locationSpan: { start: [148, 5], end: [151, 3] }, span: [4127, 4180], name:  }, { name: async.eachLimit, type: function, locationSpan: { start: [151, 3], end: [154, 4] }, span: [4181, 4337] }, { type: text, locationSpan: { start: [154, 5], end: [157, 3] }, span: [4338, 4389], name:  }, { name: _eachLimit, type: function, locationSpan: { start: [157, 3], end: [195, 4] }, span: [4390, 5712], children: [{ type: text, locationSpan: { start: [157, 18], end: [168, 12] }, span: [4425, 4737], name:  }, { name: replenish, type: function, locationSpan: { start: [168, 12], end: [193, 12] }, span: [4738, 5689] }, { type: text, locationSpan: { start: [193, 13], end: [195, 3] }, span: [5690, 5711], name:  }] }, { type: text, locationSpan: { start: [195, 5], end: [198, 3] }, span: [5713, 5723], name:  }, { name: doParallel, type: function, locationSpan: { start: [198, 3], end: [203, 4] }, span: [5724, 5930] }, { type: text, locationSpan: { start: [203, 5], end: [204, 3] }, span: [5931, 5937], name:  }, { name: doParallelLimit, type: function, locationSpan: { start: [204, 3], end: [209, 4] }, span: [5938, 6162] }, { type: text, locationSpan: { start: [209, 5], end: [210, 3] }, span: [6163, 6169], name:  }, { name: doSeries, type: function, locationSpan: { start: [210, 3], end: [215, 4] }, span: [6170, 6380] }, { type: text, locationSpan: { start: [215, 5], end: [218, 3] }, span: [6381, 6391], name:  }, { name: _asyncMap, type: function, locationSpan: { start: [218, 3], end: [231, 4] }, span: [6392, 6847] }, { type: text, locationSpan: { start: [231, 5], end: [234, 3] }, span: [6848, 6938], name:  }, { name: async.mapLimit, type: function, locationSpan: { start: [234, 3], end: [236, 4] }, span: [6939, 7064] }, { type: text, locationSpan: { start: [236, 5], end: [238, 3] }, span: [7065, 7073], name:  }, { name: _mapLimit, type: function, locationSpan: { start: [238, 3], end: [240, 4] }, span: [7074, 7164] }, { type: text, locationSpan: { start: [240, 5], end: [244, 3] }, span: [7165, 7282], name:  }, { name: async.reduce, type: function, locationSpan: { start: [244, 3], end: [253, 4] }, span: [7283, 7605] }, { type: text, locationSpan: { start: [253, 5], end: [259, 3] }, span: [7606, 7722], name:  }, { name: async.reduceRight, type: function, locationSpan: { start: [259, 3], end: [264, 4] }, span: [7723, 7945] }, { type: text, locationSpan: { start: [264, 5], end: [268, 3] }, span: [7946, 8012], name:  }, { name: _filter, type: function, locationSpan: { start: [268, 3], end: [287, 4] }, span: [8013, 8649] }, { type: text, locationSpan: { start: [287, 5], end: [294, 3] }, span: [8650, 8845], name:  }, { name: _reject, type: function, locationSpan: { start: [294, 3], end: [313, 4] }, span: [8846, 9483] }, { type: text, locationSpan: { start: [313, 5], end: [317, 3] }, span: [9484, 9578], name:  }, { name: _detect, type: function, locationSpan: { start: [317, 3], end: [331, 4] }, span: [9579, 10046] }, { type: text, locationSpan: { start: [331, 5], end: [335, 3] }, span: [10047, 10141], name:  }, { name: async.some, type: function, locationSpan: { start: [335, 3], end: [347, 4] }, span: [10142, 10555] }, { type: text, locationSpan: { start: [347, 5], end: [351, 3] }, span: [10556, 10611], name:  }, { name: async.every, type: function, locationSpan: { start: [351, 3], end: [363, 4] }, span: [10612, 11027] }, { type: text, locationSpan: { start: [363, 5], end: [367, 3] }, span: [11028, 11084], name:  }, { name: async.sortBy, type: function, locationSpan: { start: [367, 3], end: [391, 4] }, span: [11085, 11939], children: [{ type: text, locationSpan: { start: [367, 36], end: [382, 15] }, span: [11136, 11602], name:  }, { name: fn, type: function, locationSpan: { start: [382, 15], end: [385, 16] }, span: [11603, 11774] }, { type: text, locationSpan: { start: [385, 17], end: [391, 3] }, span: [11775, 11938], name:  }] }, { type: text, locationSpan: { start: [391, 5], end: [393, 3] }, span: [11940, 11948], name:  }, { name: async.auto, type: function, locationSpan: { start: [393, 3], end: [468, 4] }, span: [11949, 14627], children: [{ type: text, locationSpan: { start: [393, 28], end: [403, 7] }, span: [11990, 12217], name:  }, { name: addListener, type: function, locationSpan: { start: [403, 7], end: [405, 8] }, span: [12218, 12297] }, { type: text, locationSpan: { start: [405, 9], end: [406, 7] }, span: [12298, 12308], name:  }, { name: removeListener, type: function, locationSpan: { start: [406, 7], end: [413, 8] }, span: [12309, 12568] }, { type: text, locationSpan: { start: [413, 9], end: [414, 7] }, span: [12569, 12579], name:  }, { name: taskComplete, type: function, locationSpan: { start: [414, 7], end: [418, 8] }, span: [12580, 12717] }, { type: text, locationSpan: { start: [418, 9], end: [429, 11] }, span: [12718, 13058], name:  }, { name: taskCallback, type: function, locationSpan: { start: [429, 11], end: [448, 12] }, span: [13059, 13868] }, { type: text, locationSpan: { start: [448, 13], end: [450, 11] }, span: [13869, 13959], name:  }, { name: ready, type: function, locationSpan: { start: [450, 11], end: [454, 12] }, span: [13960, 14178] }, { type: text, locationSpan: { start: [454, 13], end: [459, 15] }, span: [14179, 14323], name:  }, { name: listener, type: function, locationSpan: { start: [459, 15], end: [464, 16] }, span: [14324, 14551] }, { type: text, locationSpan: { start: [464, 17], end: [468, 3] }, span: [14552, 14626], name:  }] }, { type: text, locationSpan: { start: [468, 5], end: [470, 3] }, span: [14628, 14636], name:  }, { name: async.waterfall, type: function, locationSpan: { start: [470, 3], end: [501, 4] }, span: [14637, 15810], children: [{ type: text, locationSpan: { start: [470, 28], end: [479, 7] }, span: [14683, 14994], name:  }, { name: wrapIterator, type: function, locationSpan: { start: [479, 7], end: [499, 8] }, span: [14995, 15754] }, { type: text, locationSpan: { start: [499, 9], end: [501, 3] }, span: [15755, 15809], name:  }] }, { type: text, locationSpan: { start: [501, 5], end: [503, 3] }, span: [15811, 15819], name:  }, { name: _parallel, type: function, locationSpan: { start: [503, 3], end: [533, 4] }, span: [15820, 16968] }, { type: text, locationSpan: { start: [533, 5], end: [535, 3] }, span: [16969, 16977], name:  }, { name: async.parallel, type: function, locationSpan: { start: [535, 3], end: [537, 4] }, span: [16978, 17104] }, { type: text, locationSpan: { start: [537, 5], end: [539, 3] }, span: [17105, 17113], name:  }, { name: async.parallelLimit, type: function, locationSpan: { start: [539, 3], end: [541, 4] }, span: [17114, 17265] }, { type: text, locationSpan: { start: [541, 5], end: [543, 3] }, span: [17266, 17274], name:  }, { name: async.series, type: function, locationSpan: { start: [543, 3], end: [573, 4] }, span: [17275, 18425] }, { type: text, locationSpan: { start: [573, 5], end: [575, 3] }, span: [18426, 18434], name:  }, { name: async.iterator, type: function, locationSpan: { start: [575, 3], end: [589, 4] }, span: [18435, 18930], children: [{ type: text, locationSpan: { start: [575, 18], end: [576, 7] }, span: [18470, 18479], name:  }, { name: makeCallback, type: function, locationSpan: { start: [576, 7], end: [587, 8] }, span: [18480, 18889], children: [{ type: text, locationSpan: { start: [576, 18], end: [577, 11] }, span: [18517, 18530], name:  }, { name: fn, type: function, locationSpan: { start: [577, 11], end: [582, 12] }, span: [18531, 18716] }, { type: text, locationSpan: { start: [582, 13], end: [583, 11] }, span: [18717, 18731], name:  }, { name: fn.next, type: function, locationSpan: { start: [583, 11], end: [585, 12] }, span: [18732, 18853] }, { type: text, locationSpan: { start: [585, 13], end: [587, 7] }, span: [18854, 18888], name:  }] }, { type: text, locationSpan: { start: [587, 9], end: [589, 3] }, span: [18890, 18929], name:  }] }, { type: text, locationSpan: { start: [589, 5], end: [591, 3] }, span: [18931, 18939], name:  }, { name: async.apply, type: function, locationSpan: { start: [591, 3], end: [598, 4] }, span: [18940, 19199] }, { type: text, locationSpan: { start: [598, 5], end: [600, 3] }, span: [19200, 19208], name:  }, { name: _concat, type: function, locationSpan: { start: [600, 3], end: [610, 4] }, span: [19209, 19523] }, { type: text, locationSpan: { start: [610, 5], end: [614, 3] }, span: [19524, 19618], name:  }, { name: async.whilst, type: function, locationSpan: { start: [614, 3], end: [626, 4] }, span: [19619, 19966] }, { type: text, locationSpan: { start: [626, 5], end: [628, 3] }, span: [19967, 19975], name:  }, { name: async.doWhilst, type: function, locationSpan: { start: [628, 3], end: [640, 4] }, span: [19976, 20327] }, { type: text, locationSpan: { start: [640, 5], end: [642, 3] }, span: [20328, 20336], name:  }, { name: async.until, type: function, locationSpan: { start: [642, 3], end: [654, 4] }, span: [20337, 20683] }, { type: text, locationSpan: { start: [654, 5], end: [656, 3] }, span: [20684, 20692], name:  }, { name: async.doUntil, type: function, locationSpan: { start: [656, 3], end: [668, 4] }, span: [20693, 21043] }, { type: text, locationSpan: { start: [668, 5], end: [670, 3] }, span: [21044, 21052], name:  }, { name: async.queue, type: function, locationSpan: { start: [670, 3], end: [739, 4] }, span: [21053, 23346], children: [{ type: text, locationSpan: { start: [670, 32], end: [674, 7] }, span: [21099, 21191], name:  }, { name: _insert, type: function, locationSpan: { start: [674, 7], end: [695, 8] }, span: [21192, 21854] }, { type: text, locationSpan: { start: [695, 9], end: [704, 17] }, span: [21855, 22066], name:  }, { name: push, type: function, locationSpan: { start: [704, 17], end: [706, 12] }, span: [22067, 22158] }, { type: text, locationSpan: { start: [706, 13], end: [707, 20] }, span: [22159, 22182], name:  }, { name: unshift, type: function, locationSpan: { start: [707, 20], end: [709, 12] }, span: [22183, 22273] }, { type: text, locationSpan: { start: [709, 13], end: [710, 20] }, span: [22274, 22297], name:  }, { name: process, type: function, locationSpan: { start: [710, 20], end: [730, 12] }, span: [22298, 23132], children: [{ type: text, locationSpan: { start: [710, 13], end: [717, 19] }, span: [22311, 22601], name:  }, { name: next, type: function, locationSpan: { start: [717, 19], end: [726, 20] }, span: [22602, 23006] }, { type: text, locationSpan: { start: [726, 21], end: [730, 11] }, span: [23007, 23131], name:  }] }, { type: text, locationSpan: { start: [730, 13], end: [731, 19] }, span: [23133, 23155], name:  }, { name: length, type: function, locationSpan: { start: [731, 19], end: [733, 12] }, span: [23156, 23223] }, { type: text, locationSpan: { start: [733, 13], end: [734, 20] }, span: [23224, 23247], name:  }, { name: running, type: function, locationSpan: { start: [734, 20], end: [736, 12] }, span: [23248, 23308] }, { type: text, locationSpan: { start: [736, 13], end: [739, 3] }, span: [23309, 23345], name:  }] }, { type: text, locationSpan: { start: [739, 5], end: [741, 3] }, span: [23347, 23355], name:  }, { name: async.cargo, type: function, locationSpan: { start: [741, 3], end: [804, 4] }, span: [23356, 25435], children: [{ type: text, locationSpan: { start: [741, 28], end: [751, 17] }, span: [23398, 23647], name:  }, { name: push, type: function, locationSpan: { start: [751, 17], end: [765, 12] }, span: [23648, 24232] }, { type: text, locationSpan: { start: [765, 13], end: [766, 20] }, span: [24233, 24256], name:  }, { name: process, type: function, locationSpan: { start: [766, 20], end: [795, 12] }, span: [24257, 25219] }, { type: text, locationSpan: { start: [795, 13], end: [796, 19] }, span: [25220, 25242], name:  }, { name: length, type: function, locationSpan: { start: [796, 19], end: [798, 12] }, span: [25243, 25308] }, { type: text, locationSpan: { start: [798, 13], end: [799, 20] }, span: [25309, 25332], name:  }, { name: running, type: function, locationSpan: { start: [799, 20], end: [801, 12] }, span: [25333, 25393] }, { type: text, locationSpan: { start: [801, 13], end: [804, 3] }, span: [25394, 25434], name:  }] }, { type: text, locationSpan: { start: [804, 5], end: [806, 3] }, span: [25436, 25444], name:  }, { name: _console_fn, type: function, locationSpan: { start: [806, 3], end: [825, 4] }, span: [25445, 26192] }, { type: text, locationSpan: { start: [825, 5], end: [832, 3] }, span: [26193, 26398], name:  }, { name: async.memoize, type: function, locationSpan: { start: [832, 3], end: [863, 4] }, span: [26399, 27489], children: [{ type: text, locationSpan: { start: [832, 23], end: [838, 7] }, span: [26438, 26575], name:  }, { name: memoized, type: function, locationSpan: { start: [838, 7], end: [859, 8] }, span: [26576, 27389] }, { type: text, locationSpan: { start: [859, 9], end: [863, 3] }, span: [27390, 27488], name:  }] }, { type: text, locationSpan: { start: [863, 5], end: [865, 3] }, span: [27490, 27498], name:  }, { name: async.unmemoize, type: function, locationSpan: { start: [865, 3], end: [869, 4] }, span: [27499, 27638] }, { type: text, locationSpan: { start: [869, 5], end: [871, 3] }, span: [27639, 27647], name:  }, { name: async.times, type: function, locationSpan: { start: [871, 3], end: [877, 4] }, span: [27648, 27873] }, { type: text, locationSpan: { start: [877, 5], end: [879, 3] }, span: [27874, 27882], name:  }, { name: async.timesSeries, type: function, locationSpan: { start: [879, 3], end: [885, 4] }, span: [27883, 28120] }, { type: text, locationSpan: { start: [885, 5], end: [887, 3] }, span: [28121, 28129], name:  }, { name: async.compose, type: function, locationSpan: { start: [887, 3], end: [904, 4] }, span: [28130, 28865] }, { type: text, locationSpan: { start: [904, 5], end: [906, 3] }, span: [28866, 28874], name:  }, { name: _applyEach, type: function, locationSpan: { start: [906, 3], end: [923, 4] }, span: [28875, 29462], children: [{ type: text, locationSpan: { start: [906, 36], end: [907, 7] }, span: [28928, 28937], name:  }, { name: go, type: function, locationSpan: { start: [907, 7], end: [915, 8] }, span: [28938, 29247] }, { type: text, locationSpan: { start: [915, 9], end: [923, 3] }, span: [29248, 29461], name:  }] }, { type: text, locationSpan: { start: [923, 5], end: [927, 3] }, span: [29463, 29569], name:  }, { name: async.forever, type: function, locationSpan: { start: [927, 3], end: [938, 4] }, span: [29570, 29860], children: [{ type: text, locationSpan: { start: [927, 25], end: [928, 7] }, span: [29611, 29620], name:  }, { name: next, type: function, locationSpan: { start: [928, 7], end: [936, 8] }, span: [29621, 29836] }, { type: text, locationSpan: { start: [936, 9], end: [938, 3] }, span: [29837, 29859], name:  }] }, { type: text, locationSpan: { start: [938, 5], end: [955, 4] }, span: [29861, 30245], name:  }]
locationSpan: { start: [1, 0], end: [955, 4] }
footerSpan: [0, -1]
span: [0, 30245]
name: 'C:\Users\gimenete\AppData\Local\Temp\\25a6e4ba-5d5a-4b48-a722-ca7ebc6235fb.txt'
type: file
parsingErrorsDetected: false

end!!!!